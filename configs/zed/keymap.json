[
  // Standard macOS bindings
  {
    "use_key_equivalents": true,
    "bindings": {
      "f4": "debugger::Start",
      "shift-f5": "debugger::Stop",
      "shift-cmd-f5": "debugger::RerunSession",
      "f6": "debugger::Pause",
      "f7": "debugger::StepOver",
      "ctrl-f11": "debugger::StepInto",
      "shift-f11": "debugger::StepOut",
      "ctrl-n": "menu::SelectNext",
      "ctrl-p": "menu::SelectPrevious",
      "ctrl-y": "menu::Confirm",
      "enter": "menu::Confirm",
      "ctrl-c": "menu::Cancel",
      "escape": "menu::Cancel",
      "shift-escape": "workspace::ToggleZoom",
      "cmd-=": ["zed::IncreaseBufferFontSize", { "persist": false }],
      "cmd--": ["zed::DecreaseBufferFontSize", { "persist": false }],
      "cmd-0": ["zed::ResetBufferFontSize", { "persist": false }],
      "cmd-,": "zed::OpenSettings",
      "cmd-.": "zed::OpenKeymap",
      "cmd-//": "zed::OpenKeymapEditor",
      "cmd-;": "dev::OpenKeyContextView",
      "cmd-q": "zed::Quit",
      "cmd-m": "zed::Minimize",
      "ctrl-cmd-z": "edit_prediction::RateCompletions",
      "ctrl-cmd-i": "edit_prediction::ToggleMenu",
      "ctrl-cmd-l": "lsp_tool::ToggleMenu"
    }
  },
  {
    "context": "Editor",
    "use_key_equivalents": true,
    "bindings": {
      "backspace": "editor::Backspace",
      "tab": "editor::Tab",
      "shift-tab": "editor::Backtab",
      "cmd-x": "editor::Cut",
      "cmd-c": "editor::Copy",
      "cmd-v": "editor::Paste",
      "ctrl-cmd-space": "editor::ShowCharacterPalette",
      "cmd-alt-g b": "git::Blame",
      "cmd-alt-g m": "git::OpenModifiedFiles",
      "f9": "editor::ToggleBreakpoint",
      "shift-f9": "editor::EditLogBreakpoint"
    }
  },
  {
    "context": "Editor && mode == full",
    "use_key_equivalents": true,
    "bindings": {
      "enter": "editor::Newline",
      "cmd->": "assistant::QuoteSelection",
      "cmd-alt-e": "editor::SelectEnclosingSymbol",
      "alt-enter": "editor::OpenSelectionsInMultibuffer"
    }
  },
  {
    "context": "Editor && multibuffer",
    "use_key_equivalents": true,
    "bindings": {
      "cmd-up": "editor::MoveToStartOfExcerpt",
      "cmd-down": "editor::MoveToStartOfNextExcerpt",
      "cmd-shift-up": "editor::SelectToStartOfExcerpt",
      "cmd-shift-down": "editor::SelectToStartOfNextExcerpt"
    }
  },
  {
    "context": "Editor && mode == full && edit_prediction",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-n": "editor::NextEditPrediction",
      "ctrl-p": "editor::PreviousEditPrediction"
    }
  },
  {
    "context": "Editor && !edit_prediction",
    "use_key_equivalents": true,
    "bindings": {
      //defined in vim
    }
  },
  {
    "context": "Editor && mode == auto_height",
    "use_key_equivalents": true,
    "bindings": {
      "shift-enter": "editor::Newline"
    }
  },
  {
    "context": "Markdown",
    "use_key_equivalents": true,
    "bindings": {
      "cmd-c": "markdown::Copy"
    }
  },
  {
    "context": "Editor && jupyter && !ContextEditor",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "Editor && !agent_diff",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "AgentDiff",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "Editor && editor_agent_diff",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "ContextEditor > Editor",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "AgentPanel",
    "use_key_equivalents": true,
    "bindings": {
      "cmd-i": "agent::ToggleProfileSelector",
      "cmd-alt-/": "agent::ToggleModelSelector",
      "cmd-shift-a": "agent::ToggleContextPicker",
      "cmd-shift-i": "agent::ToggleOptionsMenu",
      "cmd->": "assistant::QuoteSelection",
      "cmd-alt-e": "agent::RemoveAllContext"
    }
  },
  {
    "context": "AgentPanel > NavigationMenu",
    "bindings": {
      //
    }
  },
  {
    "context": "AgentPanel > Markdown",
    "use_key_equivalents": true,
    "bindings": {
      "cmd-c": "markdown::CopyAsMarkdown"
    }
  },
  {
    "context": "AgentPanel && prompt_editor",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "AgentPanel && external_agent_thread",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "MessageEditor && !Picker > Editor && !use_modifier_to_send",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "MessageEditor && !Picker > Editor && use_modifier_to_send",
    "use_key_equivalents": true,
    "bindings": {
      "cmd-enter": "agent::Chat",
      "enter": "editor::Newline"
    }
  },
  {
    "context": "EditMessageEditor > Editor",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "AgentFeedbackMessageEditor > Editor",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "ContextStrip",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "AgentConfiguration",
    "bindings": {
      //
    }
  },
  {
    "context": "AcpThread > Editor",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "ThreadHistory",
    "bindings": {
      //
    }
  },
  {
    "context": "ThreadHistory > Editor",
    "bindings": {
      //
    }
  },
  {
    "context": "PromptLibrary",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "BufferSearchBar",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "BufferSearchBar && in_replace > Editor",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-y": "search::ReplaceNext",
      "ctrl-shift-y": "search::ReplaceAll"
    }
  },
  {
    "context": "BufferSearchBar && !in_replace > Editor",
    "use_key_equivalents": true,
    "bindings": {
      "up": "search::PreviousHistoryQuery",
      "down": "search::NextHistoryQuery"
    }
  },
  {
    "context": "ProjectSearchBar",
    "use_key_equivalents": true,
    "bindings": {
      "escape": "project_search::ToggleFocus",
      "n": "vim::MoveToNextMatch",
      "shift-n": "vim::MoveToPreviousMatch"
    }
  },
  {
    "context": "ProjectSearchBar > Editor",
    "use_key_equivalents": true,
    "bindings": {
      "up": "search::PreviousHistoryQuery",
      "down": "search::NextHistoryQuery"
    }
  },
  {
    "context": "ProjectSearchBar && in_replace > Editor",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-y": "search::ReplaceNext",
      "ctrl-shift-y": "search::ReplaceAll"
    }
  },
  {
    "context": "ProjectSearchView",
    "use_key_equivalents": true,
    "bindings": {
      "escape": "project_search::ToggleFocus"
    }
  },
  {
    "context": "Pane",
    "use_key_equivalents": true,
    "bindings": {
      "cmd-w": ["pane::CloseActiveItem", { "close_pinned": false }],
      "cmd-shift-h": "search::ToggleReplace",
      "cmd-alt-l": "search::ToggleSelection",
      "alt-enter": "search::SelectAllMatches",
      "alt-cmd-c": "search::ToggleCaseSensitive",
      "alt-cmd-w": "search::ToggleWholeWord",
      "alt-cmd-f": "project_search::ToggleFilters",
      "alt-cmd-x": "search::ToggleRegex"
    }
  },
  // Bindings from VS Code
  {
    "context": "Editor",
    "use_key_equivalents": true,
    "bindings": {
      //nobody likes vscode
    }
  },
  {
    "context": "Editor && extension == md",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "Editor && extension == svg",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "Editor && mode == full",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "Pane",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "Workspace",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown",
      "cmd-b": "workspace::ToggleLeftDock",
      "cmd-r": "workspace::ToggleRightDock",
      "cmd-j": "workspace::ToggleBottomDock",
      "cmd-p": "file_finder::Toggle",
      "ctrl-tab": "tab_switcher::Toggle",
      "ctrl-shift-tab": ["tab_switcher::Toggle", { "select_last": true }],
      "f5": "debugger::Rerun",
      "cmd-w": "workspace::CloseActiveDock"
    }
  },
  {
    "context": "Workspace && !Terminal",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "Workspace && debugger_running",
    "use_key_equivalents": true,
    "bindings": {
      "f5": null
    }
  },
  {
    "context": "Workspace && debugger_stopped",
    "use_key_equivalents": true,
    "bindings": {
      "f5": "debugger::Continue"
    }
  },
  // Bindings from Sublime Text
  {
    "context": "Editor",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  // Bindings from Atom
  {
    "context": "Pane",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  // Bindings that should be unified with bindings for more general actions
  {
    "context": "Editor && renaming",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-y": "editor::ConfirmRename"
    }
  },
  {
    "context": "Editor && showing_completions",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-y": "editor::ConfirmCompletion",
      "ctrl-alt-y": "editor::ConfirmCompletionReplace",
      "ctrl-shift-y": "editor::ComposeCompletion"
    }
  },
  {
    "context": "Editor && edit_prediction",
    "bindings": {
      "cmd-y": "editor::AcceptEditPrediction",
      "ctrl-cmd-y": "editor::AcceptPartialEditPrediction"
    }
  },
  {
    "context": "Editor && edit_prediction_conflict",
    "use_key_equivalents": true,
    "bindings": {
      "cmd-y": "editor::AcceptEditPrediction",
      "ctrl-cmd-y": "editor::AcceptPartialEditPrediction"
    }
  },
  {
    "context": "Editor && showing_code_actions",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-y": "editor::ConfirmCodeAction"
    }
  },
  {
    "context": "Editor && (showing_code_actions || showing_completions)",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-p": "editor::ContextMenuPrevious",
      "ctrl-n": "editor::ContextMenuNext"
    }
  },
  {
    "context": "Editor && showing_signature_help && !showing_completions",
    "bindings": {
      //defined in vim
    }
  },
  // Custom bindings
  {
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "!ContextEditor > Editor && mode == full",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "PromptEditor",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "Prompt",
    "use_key_equivalents": true,
    "bindings": {
      "h": "menu::SelectPrevious",
      "l": "menu::SelectNext"
    }
  },
  {
    "context": "ProjectSearchBar && !in_replace",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "OutlinePanel && not_editing",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "ProjectPanel",
    "use_key_equivalents": true,
    "bindings": {
      //defined in netrw
    }
  },
  {
    "context": "ProjectPanel && not_editing",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "VariableList",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "GitPanel && ChangesList",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "GitPanel && CommitEditor",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "GitDiff > Editor",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "CommitEditor > Editor",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "GitPanel",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "GitCommit > Editor",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "DebugPanel",
    "bindings": {
      //
    }
  },
  {
    "context": "BreakpointList",
    "bindings": {
      //
    }
  },
  {
    "context": "CollabPanel && not_editing",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "CollabPanel",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "(CollabPanel && editing) > Editor",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "ChannelModal",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "Picker > Editor",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-p": "menu::SelectPrevious",
      "ctrl-n": "menu::SelectNext",
      "ctrl-y": "picker::ConfirmCompletion"
    }
  },
  {
    "context": "ChannelModal > Picker > Editor",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "FileFinder || (FileFinder > Picker > Editor)",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "FileFinder || (FileFinder > Picker > Editor) || (FileFinder > Picker > menu)",
    "use_key_equivalents": true,
    "bindings": {
      "cmd-j": "pane::SplitDown",
      "cmd-k": "pane::SplitUp",
      "cmd-h": "pane::SplitLeft",
      "cmd-l": "pane::SplitRight"
    }
  },
  {
    "context": "TabSwitcher",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-shift-tab": "menu::SelectPrevious",
      "ctrl-backspace": "tab_switcher::CloseSelectedItem"
    }
  },
  {
    "context": "Terminal",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-cmd-space": "terminal::ShowCharacterPalette",
      "cmd-c": "terminal::Copy",
      "cmd-v": "terminal::Paste",
      "ctrl-_": null, // emacs undo
      // Some nice conveniences
      "cmd-backspace": ["terminal::SendText", "\u0015"], // ctrl-u: clear line
      "cmd-right": ["terminal::SendText", "\u0005"],
      "cmd-left": ["terminal::SendText", "\u0001"],
      // Terminal.app compatibility
      "alt-left": ["terminal::SendText", "\u001bb"],
      "alt-right": ["terminal::SendText", "\u001bf"],
      "alt-b": ["terminal::SendText", "\u001bb"],
      "alt-f": ["terminal::SendText", "\u001bf"],
      "ctrl-delete": ["terminal::SendText", "\u001bd"],
      "escape": ["terminal::SendKeystroke", "escape"],
      "enter": ["terminal::SendKeystroke", "enter"],
      "ctrl-c": ["terminal::SendKeystroke", "ctrl-c"],
      "ctrl-backspace": ["terminal::SendKeystroke", "ctrl-w"]
    }
  },
  {
    "context": "RateCompletionModal",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "RateCompletionModal > Editor",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "ZedPredictModal",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "ConfigureContextServerModal > Editor",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "OnboardingAiConfigurationModal",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "Diagnostics",
    "use_key_equivalents": true,
    "bindings": {
      "ctrl-r": "diagnostics::ToggleDiagnosticsRefresh"
    }
  },
  {
    "context": "DebugConsole > Editor",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "RunModal",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "MarkdownPreview",
    "bindings": {
      //
    }
  },
  {
    "context": "KeymapEditor",
    "use_key_equivalents": true,
    "bindings": {
      "backspace": "keymap_editor::DeleteBinding",
      "cmd-f": "search::FocusSearch",
      "cmd-alt-f": "keymap_editor::ToggleKeystrokeSearch",
      "enter": "keymap_editor::EditBinding",
      "cmd-t": "keymap_editor::ShowMatchingKeybinds"
    }
  },
  {
    "context": "KeystrokeInput",
    "use_key_equivalents": true,
    "bindings": {
      "enter": "keystroke_input::StartRecording",
      "escape escape escape": "keystroke_input::StopRecording",
      "delete": "keystroke_input::ClearKeystrokes"
    }
  },
  {
    "context": "KeybindEditorModal",
    "use_key_equivalents": true,
    "bindings": {
      "cmd-enter": "menu::Confirm"
    }
  },
  {
    "context": "KeybindEditorModal > Editor",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },
  {
    "context": "Onboarding",
    "use_key_equivalents": true,
    "bindings": {
      //
    }
  },

  // vim start
  {
    "context": "VimControl && !menu",
    "bindings": {
      "i": ["vim::PushObject", { "around": false }],
      "a": ["vim::PushObject", { "around": true }],
      "h": "vim::Left",
      "j": "vim::Down",
      "+": "vim::NextLineStart",
      "-": "vim::PreviousLineStart",
      "tab": "vim::Tab",
      "k": "vim::Up",
      "l": "vim::Right",
      "$": "vim::EndOfLine",
      "^": "vim::FirstNonWhitespace",
      "shift-g": "vim::EndOfDocument",
      "{": "vim::StartOfParagraph",
      "}": "vim::EndOfParagraph",
      "(": "vim::SentenceBackward",
      ")": "vim::SentenceForward",
      "|": "vim::GoToColumn",
      "] ]": "vim::NextSectionStart",
      "] [": "vim::NextSectionEnd",
      "[ [": "vim::PreviousSectionStart",
      "[ ]": "vim::PreviousSectionEnd",
      "] m": "vim::NextMethodStart",
      "] shift-m": "vim::NextMethodEnd",
      "[ m": "vim::PreviousMethodStart",
      "[ shift-m": "vim::PreviousMethodEnd",
      "[ /": "vim::PreviousComment",
      "] /": "vim::NextComment",
      "[ -": "vim::PreviousLesserIndent",
      "[ +": "vim::PreviousGreaterIndent",
      "[ =": "vim::PreviousSameIndent",
      "] -": "vim::NextLesserIndent",
      "] +": "vim::NextGreaterIndent",
      "] =": "vim::NextSameIndent",
      "] space": "vim::InsertEmptyLineBelow",
      "[ space": "vim::InsertEmptyLineAbove",
      "[ e": "editor::MoveLineUp",
      "] e": "editor::MoveLineDown",

      // Word motions
      "w": "vim::NextWordStart",
      "e": "vim::NextWordEnd",
      "b": "vim::PreviousWordStart",
      "g e": "vim::PreviousWordEnd",
      "shift-w": ["vim::NextWordStart", { "ignore_punctuation": true }],
      "shift-e": ["vim::NextWordEnd", { "ignore_punctuation": true }],
      "shift-b": ["vim::PreviousWordStart", { "ignore_punctuation": true }],
      "g shift-e": ["vim::PreviousWordEnd", { "ignore_punctuation": true }],
      "/": "vim::Search",
      "g /": "pane::DeploySearch",
      "?": ["vim::Search", { "backwards": true }],
      "*": "vim::MoveToNext",
      "#": "vim::MoveToPrevious",
      "n": "vim::MoveToNextMatch",
      "shift-n": "vim::MoveToPreviousMatch",
      "%": "vim::Matching",
      "] }": ["vim::UnmatchedForward", { "char": "}" }],
      "[ {": ["vim::UnmatchedBackward", { "char": "{" }],
      "] )": ["vim::UnmatchedForward", { "char": ")" }],
      "[ (": ["vim::UnmatchedBackward", { "char": "(" }],
      "f": ["vim::PushFindForward", { "before": false, "multiline": false }],
      "t": ["vim::PushFindForward", { "before": true, "multiline": false }],
      "shift-f": [
        "vim::PushFindBackward",
        { "after": false, "multiline": false }
      ],
      "shift-t": [
        "vim::PushFindBackward",
        { "after": true, "multiline": false }
      ],
      "m": "vim::PushMark",
      "'": ["vim::PushJump", { "line": true }],
      "`": ["vim::PushJump", { "line": false }],
      ";": "vim::RepeatFind",
      ",": "vim::RepeatFindReversed",
      "ctrl-o": "pane::GoBack",
      "ctrl-i": "pane::GoForward",
      "ctrl-c": "vim::SwitchToNormalMode",
      "v": "vim::ToggleVisual",
      "shift-v": "vim::ToggleVisualLine",
      "ctrl-g": "vim::ShowLocation",
      "ctrl-v": "vim::ToggleVisualBlock",
      "shift-k": "editor::Hover",
      "shift-r": "vim::ToggleReplace",
      "0": "vim::StartOfLine",
      "ctrl-f": ["editor::MovePageDown", { "center_cursor": true }],
      "ctrl-b": ["editor::MovePageUp", { "center_cursor": true }],
      "ctrl-d": "vim::ScrollDown",
      "ctrl-u": "vim::ScrollUp",
      // "g" commands
      "g shift-r": "vim::PushReplaceWithRegister",
      "g r n": "editor::Rename",
      "g r r": "editor::FindAllReferences",
      "g r a": "editor::ToggleCodeActions",
      "g g": "vim::StartOfDocument",
      "g B": "editor::BlameHover",
      "g t": "pane::ActivateNextItem",
      "g shift-t": "pane::ActivatePreviousItem",
      "g d": "editor::GoToDefinition",
      "g shift-d": "editor::GoToDeclaration",
      "g y": "editor::GoToTypeDefinition",
      "g shift-i": "editor::GoToImplementation",
      "g x": "editor::OpenUrl",
      "g f": "editor::OpenSelectedFilename",
      "g n": "vim::SelectNextMatch",
      "g shift-n": "vim::SelectPreviousMatch",
      "g l": "vim::SelectNext",
      "g shift-l": "vim::SelectPrevious",
      "g >": ["editor::SelectNext", { "replace_newest": true }],
      "g <": ["editor::SelectPrevious", { "replace_newest": true }],
      "g a": "editor::SelectAllMatches",
      "g s": "outline::Toggle",
      "g shift-s": "project_symbols::Toggle",
      "g shift-a": "editor::FindAllReferences", // zed specific
      "g space": "editor::OpenExcerpts", // zed specific
      "g *": ["vim::MoveToNext", { "partial_word": true }],
      "g #": ["vim::MoveToPrevious", { "partial_word": true }],
      "g v": "vim::RestoreVisualSelection",
      "g i": "vim::InsertAtPrevious",
      "g ,": "vim::ChangeListNewer",
      "g ;": "vim::ChangeListOlder",
      "shift-h": "vim::WindowTop",
      "shift-m": "vim::WindowMiddle",
      "shift-l": "vim::WindowBottom",
      "q": "vim::ToggleRecord",
      "shift-q": "vim::ReplayLastRecording",
      "@": "vim::PushReplayRegister",
      // z commands
      "z t": "editor::ScrollCursorTop",
      "z z": "editor::ScrollCursorCenter",
      "z b": "editor::ScrollCursorBottom",
      "z a": "editor::ToggleFold",
      "z shift-l": "vim::HalfPageRight",
      "z shift-h": "vim::HalfPageLeft",
      // Count support
      "1": ["vim::Number", 1],
      "2": ["vim::Number", 2],
      "3": ["vim::Number", 3],
      "4": ["vim::Number", 4],
      "5": ["vim::Number", 5],
      "6": ["vim::Number", 6],
      "7": ["vim::Number", 7],
      "8": ["vim::Number", 8],
      "9": ["vim::Number", 9],
      "ctrl-w d": "editor::GoToDefinitionSplit",
      "ctrl-w shift-d": "editor::GoToTypeDefinitionSplit",
      "ctrl-w space": "editor::OpenExcerptsSplit",
      ".": "vim::Repeat"
    }
  },
  {
    "context": "vim_mode == normal",
    "bindings": {
      "i": "vim::InsertBefore",
      "a": "vim::InsertAfter",
      "ctrl-c": "editor::Cancel",
      ":": "command_palette::Toggle",
      "c": "vim::PushChange",
      "shift-c": "vim::ChangeToEndOfLine",
      "d": "vim::PushDelete",
      "g shift-j": "vim::JoinLinesNoWhitespace",
      "y": "vim::PushYank",
      "x": "vim::DeleteRight",
      "shift-x": "vim::DeleteLeft",
      "ctrl-a": "vim::Increment",
      "ctrl-x": "vim::Decrement",
      "ctrl-r": "vim::Redo",
      ">": "vim::PushIndent",
      "<": "vim::PushOutdent",
      "=": "vim::PushAutoIndent",
      "!": "vim::PushShellCommand",
      "g u": "vim::PushLowercase",
      "g shift-u": "vim::PushUppercase",
      "g ~": "vim::PushOppositeCase",
      "g ?": "vim::PushRot47",
      // tree-sitter related commands
      "[ x": "vim::SelectLargerSyntaxNode",
      "] x": "vim::SelectSmallerSyntaxNode",
      "] d": "editor::GoToDiagnostic",
      "[ d": "editor::GoToPreviousDiagnostic",
      "] c": "editor::GoToHunk",
      "[ c": "editor::GoToPreviousHunk",
      "g c": "vim::PushToggleComments"
    }
  },
  {
    "context": "VimControl && VimCount",
    "bindings": {
      "0": ["vim::Number", 0],
      ":": "vim::CountCommand",
      "%": "vim::GoToPercentage"
    }
  },
  {
    "context": "vim_mode == visual",
    "bindings": {
      ":": "vim::VisualCommand",
      "u": "vim::ConvertToLowerCase",
      "shift-u": "vim::ConvertToUpperCase",
      "x": "vim::VisualDelete",
      "y": "vim::VisualYank",
      "p": "vim::Paste",
      "shift-p": ["vim::Paste", { "preserve_clipboard": true }],
      "c": "vim::Substitute",
      "~": "vim::ChangeCase",
      "*": ["vim::MoveToNext", { "partial_word": true }],
      "#": ["vim::MoveToPrevious", { "partial_word": true }],
      "ctrl-a": "vim::Increment",
      "ctrl-x": "vim::Decrement",
      "g ctrl-a": ["vim::Increment", { "step": true }],
      "g ctrl-x": ["vim::Decrement", { "step": true }],
      "shift-i": "vim::InsertBefore",
      "shift-a": "vim::InsertAfter",
      "g shift-i": "vim::VisualInsertFirstNonWhiteSpace",
      "g shift-a": "vim::VisualInsertEndOfLine",
      "shift-j": "vim::JoinLines",
      "g shift-j": "vim::JoinLinesNoWhitespace",
      "r": "vim::PushReplace",
      "ctrl-c": "vim::SwitchToNormalMode",
      ">": "vim::Indent",
      "<": "vim::Outdent",
      "=": "vim::AutoIndent",
      "!": "vim::ShellCommand",
      "i": ["vim::PushObject", { "around": false }],
      "a": ["vim::PushObject", { "around": true }],
      "g shift-r": ["vim::Paste", { "preserve_clipboard": true }],
      "g c": "vim::ToggleComments",
      "g ?": "vim::ConvertToRot47",
      "\"": "vim::PushRegister",
      // tree-sitter related commands
      "[ x": "editor::SelectLargerSyntaxNode",
      "] x": "editor::SelectSmallerSyntaxNode"
    }
  },
  {
    "context": "vim_mode == insert",
    "bindings": {
      "ctrl-c": "vim::NormalBefore",
      "ctrl-x": null,
      "ctrl-x ctrl-o": "editor::ShowCompletions",
      "ctrl-x ctrl-a": "assistant::InlineAssist", // zed specific
      "ctrl-x ctrl-c": "editor::ShowEditPrediction", // zed specific
      "ctrl-x ctrl-z": "editor::Cancel",
      "ctrl-w": "editor::DeleteToPreviousWordStart",
      "ctrl-u": "editor::DeleteToBeginningOfLine",
      "ctrl-t": "vim::Indent",
      "ctrl-d": "vim::Outdent",
      "ctrl-k": ["vim::PushDigraph", {}],
      "ctrl-v": ["vim::PushLiteral", {}],
      "ctrl-r": "vim::PushRegister",
      "ctrl-o": "vim::TemporaryNormal",
      "ctrl-s": "editor::ShowSignatureHelp"
    }
  },
  {
    "context": "(vim_mode == normal || vim_mode == helix_normal) && !menu",
    "bindings": {
      "ctrl-c": "editor::Cancel",
      "shift-d": "vim::DeleteToEndOfLine",
      "shift-j": "vim::JoinLines",
      "shift-y": "vim::YankLine",
      "shift-i": "vim::InsertFirstNonWhitespace",
      "shift-a": "vim::InsertEndOfLine",
      "o": "vim::InsertLineBelow",
      "shift-o": "vim::InsertLineAbove",
      "~": "vim::ChangeCase",
      "ctrl-a": "vim::Increment",
      "ctrl-x": "vim::Decrement",
      "p": "vim::Paste",
      "shift-p": ["vim::Paste", { "before": true }],
      "u": "vim::Undo",
      "shift-u": "vim::UndoLastLine",
      "r": "vim::PushReplace",
      "s": "vim::Substitute",
      "shift-s": "vim::SubstituteLine",
      "\"": "vim::PushRegister"
    }
  },
  {
    "context": "vim_mode == helix_normal && !menu",
    "bindings": {
      //helix is silly
    }
  },
  {
    "context": "vim_mode == insert && !(showing_code_actions || showing_completions)",
    "bindings": {
      "ctrl-space": "editor::ShowWordCompletions"
    }
  },
  {
    "context": "(vim_mode == insert || vim_mode == normal) && showing_signature_help && !showing_completions",
    "bindings": {
      "ctrl-p": "editor::SignatureHelpPrevious",
      "ctrl-n": "editor::SignatureHelpNext"
    }
  },
  {
    "context": "vim_mode == replace",
    "bindings": {
      "ctrl-c": "vim::NormalBefore",
      "ctrl-k": ["vim::PushDigraph", {}],
      "ctrl-v": ["vim::PushLiteral", {}]
    }
  },
  {
    "context": "vim_mode == waiting",
    "bindings": {
      "ctrl-c": "vim::ClearOperators",
      "ctrl-k": ["vim::PushDigraph", {}],
      "ctrl-v": ["vim::PushLiteral", {}]
    }
  },
  {
    "context": "Editor && vim_mode == waiting && (vim_operator == ys || vim_operator == cs)",
    "bindings": {
      //
    }
  },
  {
    "context": "vim_mode == operator",
    "bindings": {
      "ctrl-c": "vim::ClearOperators",
      "g c": "vim::Comment"
    }
  },
  {
    "context": "vim_operator == a || vim_operator == i || vim_operator == cs",
    "bindings": {
      "w": "vim::Word",
      "shift-w": ["vim::Word", { "ignore_punctuation": true }],
      // Subword TextObject
      // "w": "vim::Subword",
      // "shift-w": ["vim::Subword", { "ignore_punctuation": true }],
      "t": "vim::Tag",
      "s": "vim::Sentence",
      "p": "vim::Paragraph",
      "'": "vim::Quotes",
      "`": "vim::BackQuotes",
      "\"": "vim::DoubleQuotes",
      // "q": "vim::AnyQuotes",
      "q": "vim::MiniQuotes",
      "|": "vim::VerticalBars",
      "(": "vim::Parentheses",
      ")": "vim::Parentheses",
      // "b": "vim::AnyBrackets",
      "b": "vim::MiniBrackets",
      "[": "vim::SquareBrackets",
      "]": "vim::SquareBrackets",
      "{": "vim::CurlyBrackets",
      "}": "vim::CurlyBrackets",
      "<": "vim::AngleBrackets",
      ">": "vim::AngleBrackets",
      "a": "vim::Argument",
      "i": "vim::IndentObj",
      "shift-i": ["vim::IndentObj", { "include_below": true }],
      "f": "vim::Method",
      "c": "vim::Class",
      "e": "vim::EntireFile"
    }
  },
  {
    "context": "vim_operator == c",
    "bindings": {
      "c": "vim::CurrentLine",
      "x": "vim::Exchange",
      "s": ["vim::PushChangeSurrounds", {}]
    }
  },
  {
    "context": "vim_operator == d",
    "bindings": {
      "d": "vim::CurrentLine",
      "v": "vim::PushForcedMotion", // "d v"
      "o": "editor::ToggleSelectedDiffHunks", // "d o"
      "shift-o": "git::ToggleStaged",
      "p": "git::Restore", // "d p"
      "u": "git::StageAndNext", // "d u"
      "shift-u": "git::UnstageAndNext" // "d shift-u"
    }
  },
  {
    "context": "vim_operator == gu",
    "bindings": {
      "u": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == gU",
    "bindings": {
      "shift-u": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == g~",
    "bindings": {
      "~": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == g?",
    "bindings": {
      "?": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == gq",
    "bindings": {
      "q": "vim::CurrentLine",
      "w": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == y",
    "bindings": {
      "y": "vim::CurrentLine",
      "v": "vim::PushForcedMotion",
      "s": "vim::PushAddSurrounds"
    }
  },
  {
    "context": "vim_operator == ys",
    "bindings": {
      "s": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == >",
    "bindings": {
      ">": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == <",
    "bindings": {
      "<": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == eq",
    "bindings": {
      "=": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == sh",
    "bindings": {
      "!": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == gc",
    "bindings": {
      "c": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == gR",
    "bindings": {
      "shift-r": "vim::CurrentLine"
    }
  },
  {
    "context": "vim_operator == cx",
    "bindings": {
      "x": "vim::CurrentLine",
      "c": "vim::ClearExchange"
    }
  },
  {
    "context": "vim_mode == literal",
    "bindings": {
      "ctrl-@": ["vim::Literal", ["ctrl-@", "\u0000"]],
      "ctrl-a": ["vim::Literal", ["ctrl-a", "\u0001"]],
      "ctrl-b": ["vim::Literal", ["ctrl-b", "\u0002"]],
      "ctrl-c": ["vim::Literal", ["ctrl-c", "\u0003"]],
      "ctrl-d": ["vim::Literal", ["ctrl-d", "\u0004"]],
      "ctrl-e": ["vim::Literal", ["ctrl-e", "\u0005"]],
      "ctrl-f": ["vim::Literal", ["ctrl-f", "\u0006"]],
      "ctrl-g": ["vim::Literal", ["ctrl-g", "\u0007"]],
      "ctrl-h": ["vim::Literal", ["ctrl-h", "\u0008"]],
      "ctrl-i": ["vim::Literal", ["ctrl-i", "\u0009"]],
      "ctrl-j": ["vim::Literal", ["ctrl-j", "\u000A"]],
      "ctrl-k": ["vim::Literal", ["ctrl-k", "\u000B"]],
      "ctrl-l": ["vim::Literal", ["ctrl-l", "\u000C"]],
      "ctrl-m": ["vim::Literal", ["ctrl-m", "\u000D"]],
      "ctrl-n": ["vim::Literal", ["ctrl-n", "\u000E"]],
      "ctrl-o": ["vim::Literal", ["ctrl-o", "\u000F"]],
      "ctrl-p": ["vim::Literal", ["ctrl-p", "\u0010"]],
      "ctrl-q": ["vim::Literal", ["ctrl-q", "\u0011"]],
      "ctrl-r": ["vim::Literal", ["ctrl-r", "\u0012"]],
      "ctrl-s": ["vim::Literal", ["ctrl-s", "\u0013"]],
      "ctrl-t": ["vim::Literal", ["ctrl-t", "\u0014"]],
      "ctrl-u": ["vim::Literal", ["ctrl-u", "\u0015"]],
      "ctrl-v": ["vim::Literal", ["ctrl-v", "\u0016"]],
      "ctrl-w": ["vim::Literal", ["ctrl-w", "\u0017"]],
      "ctrl-x": ["vim::Literal", ["ctrl-x", "\u0018"]],
      "ctrl-y": ["vim::Literal", ["ctrl-y", "\u0019"]],
      "ctrl-z": ["vim::Literal", ["ctrl-z", "\u001A"]],
      "ctrl-[": ["vim::Literal", ["ctrl-[", "\u001B"]],
      "ctrl-\\": ["vim::Literal", ["ctrl-\\", "\u001C"]],
      "ctrl-]": ["vim::Literal", ["ctrl-]", "\u001D"]],
      "ctrl-^": ["vim::Literal", ["ctrl-^", "\u001E"]],
      "ctrl-_": ["vim::Literal", ["ctrl-_", "\u001F"]],
      "escape": ["vim::Literal", ["escape", "\u001B"]],
      "enter": ["vim::Literal", ["enter", "\u000D"]],
      "tab": ["vim::Literal", ["tab", "\u0009"]],
      // zed extensions:
      "backspace": ["vim::Literal", ["backspace", "\u0008"]]
    }
  },
  {
    "context": "BufferSearchBar && !in_replace",
    "bindings": {
      "enter": "vim::SearchSubmit",
      "ctrl-c": "buffer_search::Dismiss"
    }
  },
  {
    "context": "VimControl || !Editor && !Terminal",
    "bindings": {
      // window related commands (ctrl-w X)
      "ctrl-w": null,
      "ctrl-w shift-h": "workspace::SwapPaneLeft",
      "ctrl-w shift-l": "workspace::SwapPaneRight",
      "ctrl-w shift-k": "workspace::SwapPaneUp",
      "ctrl-w shift-j": "workspace::SwapPaneDown",
      "ctrl-w _": "vim::MaximizePane",
      "ctrl-w w": "workspace::ActivateNextPane",
      "ctrl-w p": "workspace::ActivatePreviousPane",
      "ctrl-w v": "pane::SplitVertical",
      "ctrl-w s": "pane::SplitHorizontal",
      "ctrl-w c": "pane::CloseActiveItem",
      "ctrl-w a": "pane::CloseAllItems",
      "ctrl-w o": "workspace::CloseInactiveTabsAndPanes",
      "ctrl-w n": "workspace::NewFileSplitHorizontal"
    }
  },
  {
    "context": "!Editor && !Terminal",
    "bindings": {
      ":": "command_palette::Toggle",
      "g /": "pane::DeploySearch"
    }
  },
  {
    // netrw compatibility
    "context": "ProjectPanel && not_editing",
    "bindings": {
      "cmd-c": "workspace::CopyRelativePath",
      "cmd-shift-c": "workspace::CopyPath",
      ":": "command_palette::Toggle",
      "%": "project_panel::NewFile",
      "/": "project_panel::NewSearchInDirectory",
      "d": "project_panel::NewDirectory",
      "enter": "project_panel::OpenPermanent",
      "escape": "project_panel::ToggleFocus",
      "h": "project_panel::CollapseSelectedEntry",
      "j": "menu::SelectNext",
      "k": "menu::SelectPrevious",
      "l": "project_panel::ExpandSelectedEntry",
      "shift-d": "project_panel::Delete",
      "shift-r": "project_panel::Rename",
      "x": "project_panel::RevealInFileManager",
      "s": "project_panel::OpenWithSystem",
      "z d": "project_panel::CompareMarkedFiles",
      "] c": "project_panel::SelectNextGitEntry",
      "[ c": "project_panel::SelectPrevGitEntry",
      "] d": "project_panel::SelectNextDiagnostic",
      "[ d": "project_panel::SelectPrevDiagnostic",
      "}": "project_panel::SelectNextDirectory",
      "{": "project_panel::SelectPrevDirectory",
      "shift-g": "menu::SelectLast",
      "g g": "menu::SelectFirst",
      "-": "project_panel::SelectParent"
    }
  },
  {
    "context": "OutlinePanel && not_editing",
    "bindings": {
      "j": "menu::SelectNext",
      "k": "menu::SelectPrevious",
      "shift-g": "menu::SelectLast",
      "g g": "menu::SelectFirst"
    }
  },
  {
    "context": "GitPanel && ChangesList",
    "use_key_equivalents": true,
    "bindings": {
      "j": "menu::SelectNext",
      "k": "menu::SelectPrevious"
    }
  },
  {
    "context": "Editor && mode == auto_height && VimControl",
    "bindings": {
      // TODO: Implement search
      "/": null,
      "?": null,
      "#": null,
      "*": null,
      "n": null,
      "shift-n": null
    }
  },
  {
    "context": "Picker > Editor",
    "bindings": {
      "ctrl-u": "editor::DeleteToBeginningOfLine",
      "ctrl-w": "editor::DeleteToPreviousWordStart"
    }
  },
  {
    "context": "GitCommit > Editor && VimControl && vim_mode == normal",
    "bindings": {
      //
    }
  },
  {
    "context": "Editor && edit_prediction",
    "bindings": {
      // This is identical to the binding in the base keymap, but the vim bindings above to
      // "vim::Tab" shadow it, so it needs to be bound again.
    }
  },
  {
    "context": "MessageEditor > Editor && VimControl",
    "bindings": {
      //
    }
  }
]
